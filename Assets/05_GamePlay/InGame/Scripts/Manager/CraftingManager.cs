using UnityEngine;
using UniRx;
using System;
using System.Globalization;
using GameCreator.Characters;

public class CraftingManager : MonoBehaviour
{
    // 현재 크래프팅 모드가 켜져있는지?
    public bool isOn;
    private IDisposable craftingModeTimer = Disposable.Empty;

    private Vector3 craftVector = Vector3.zero;
    private Vector3 newPos = Vector3.zero;

    public GameObject clickTrigger;
    public GameObject buttonGroup;
    public NavigationMarker marker;

    public float changeValue = 12f;

    // 임시용 코드. 엑셀 파일 받아서 리소스 패스 링크 받아올 예정
    private string buildingCode = "";
    // 건물 짓기 전 예비 오브젝트
    private GameObject preparatoryObj;

    /// <summary>
    /// 크래프팅 모드 종료
    /// </summary>
    public void FinalizeCraft()
    {
        ManageActive(false); // 오브젝트 관리 - 전부 끄기
        craftingModeTimer.Dispose();
        craftingModeTimer = Disposable.Empty;
    }

    private void OnDisable()
    {
        FinalizeCraft();
    }

    private void Start()
    {
        ManageActive(false);
        InitCrafting("");
        CraftingModeEnd();
        //CraftingModeStart();
    }

    // 오브젝트 액티브 관리
    private void ManageActive(bool isOn)
    {
        clickTrigger.SetActive(isOn);
        buttonGroup.SetActive(isOn);
    }

    public void InitCrafting(string code)
    {
        buildingCode = code;
        //GameObject obj = Resources.Load<GameObject>("GameObject/" + buildingCode);
        GameObject obj = Resources.Load<GameObject>("GameObject/Craft_Appliances_Store");

        if (obj == null)
        {
            Debug.Log("크래프팅 오브젝트 Null");
            return;
        }

        preparatoryObj = Instantiate(obj, transform);

        Vector3 playerPos = GamePlay.Instance.playerManager.GetPlayer().transform.position;
        playerPos.z += 2.0f;
        playerPos.y = 0;

        preparatoryObj.transform.position = playerPos;

        Vector3 uiPos = Camera.main.WorldToScreenPoint(playerPos);

        double truncateX = Math.Truncate(uiPos.x);
        double truncateY = Math.Truncate(uiPos.y);
        var defaultValueX = truncateX > 0f ? 0.5f : -0.5f;
        var defaultValueY = truncateY > 0f ? 0.5f : -0.5f;

        float x = Convert.ToSingle(defaultValueX + truncateX, CultureInfo.InvariantCulture);
        float y = Convert.ToSingle(defaultValueY + truncateY, CultureInfo.InvariantCulture);

        buttonGroup.transform.position = new Vector3(x, y, 0);
    }

    /// <summary>
    /// 움직일 때 크래프팅 모드 종료
    /// </summary>
    public void CraftingModeEnd()
    {
        Debug.Log("종료 감지중");
        craftingModeTimer.Dispose();
        craftingModeTimer = Disposable.Empty;
        craftingModeTimer = Observable.EveryUpdate().TakeUntilDisable(gameObject)
            .TakeUntilDestroy(gameObject)
            .Where(x => Input.GetAxis("Vertical") != 0 || Input.GetAxis("Horizontal") != 0)
            .Subscribe(_ =>
            {
                Debug.Log("종료V : " + Input.GetAxis("Vertical"));
                Debug.Log("종료H : " + Input.GetAxis("Horizontal"));
                ManageActive(false); // 오브젝트 관리 - 전부 끄기
                preparatoryObj.gameObject.SetActive(false);
            });
    }


    #region 미사용 코드

    /// <summary>
    /// 타이머 세팅. 매 업데이트마다 좌표를 계산함
    /// </summary>
    public void CraftingModeStart()
    {
        craftingModeTimer.Dispose();
        craftingModeTimer = Disposable.Empty;
        CheckCoordinates(); // 마우스 위치에 따른 좌표 계산
        MoveObjectByMousePosition();    // 오브젝트를 이동시킬 때 마우스 위치에 따라 딱딱 움직이도록
        MoveUIByMousePosition();    // UI 위치 움직이기
        ManageActive(true); // 오브젝트 관리 - 전부 켜기
        craftingModeTimer = Observable.EveryUpdate().TakeUntilDisable(gameObject)
            .TakeUntilDestroy(gameObject)
            .Subscribe(_ =>
            {
                CheckCoordinates(); // 마우스 위치에 따른 좌표 계산
                MoveObjectByMousePosition();    // 오브젝트를 이동시킬 때 마우스 위치에 따라 딱딱 움직이도록
                MoveUIByMousePosition();    // UI 위치 움직이기
            });
    }

    // 마우스 위치에 따른 좌표 계산
    private void CheckCoordinates()
    {
        Vector3 mousePosition = Input.mousePosition;
        mousePosition.z = changeValue; // 카메라와의 거리 설정

        //buttonGroup.transform.position = Input.mousePosition;
        craftVector = Camera.main.ScreenToWorldPoint(mousePosition);
        Debug.Log("마우스 월드 좌표: " + craftVector);
    }

    // 오브젝트를 이동시킬 때 마우스 위치에 따라 딱딱 움직이도록 수정
    private void MoveObjectByMousePosition()
    {
        double truncateX = Math.Truncate(craftVector.x);
        double truncateZ = Math.Truncate(craftVector.z);
        var defaultValueX = truncateX > 0f ? 0.5f : -0.5f;
        var defaultValueZ = truncateZ > 0f ? 0.5f : -0.5f;

        float x = Convert.ToSingle(defaultValueX + truncateX, CultureInfo.InvariantCulture);
        float z = Convert.ToSingle(defaultValueZ + truncateZ, CultureInfo.InvariantCulture);

        newPos = new Vector3(x, 0, z);
        preparatoryObj.transform.position = marker.transform.position = newPos;

        Debug.Log("오브젝트 월드 좌표: " + preparatoryObj.transform.position);
    }

    // UI는 오브젝트랑 좌표가 다르므로 따로 처리
    private void MoveUIByMousePosition()
    {
        Vector3 mousePos = Camera.main.WorldToScreenPoint(newPos);
        double truncateX = Math.Truncate(mousePos.x);
        double truncateY = Math.Truncate(mousePos.y);
        var defaultValueX = truncateX > 0f ? 0.5f : -0.5f;
        var defaultValueY = truncateY > 0f ? 0.5f : -0.5f;

        float x = Convert.ToSingle(defaultValueX + truncateX, CultureInfo.InvariantCulture);
        float y = Convert.ToSingle(defaultValueY + truncateY, CultureInfo.InvariantCulture);

        buttonGroup.transform.position = new Vector3(x, y, 0);
        Debug.Log("UI 좌표: " + buttonGroup.transform.position);
    }

    // UI는 오브젝트랑 좌표가 다르므로 따로 처리
    private void MoveUIByFirstMousePosition()
    {

    }


    // 버튼 클릭. 건물 짓기. 캐릭터 움직이기 + 애니메이션은 액션으로 대체
    public void OnClick_ClickToCraft()
    {
        marker.transform.position = craftVector;
    }

    #endregion
}
